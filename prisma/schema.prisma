generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model access_tokens {
  createdAt      DateTime
  description    String?
  expiresAt      DateTime
  id             Int      @default(autoincrement()) @id
  jwtAccessToken String
  name           String?
  scopes         String?
  updatedAt      DateTime @default(dbgenerated())
  user           users    @relation(fields: [userId], references: [id])
  userId         Int

  @@map("access-tokens")
}

model api_keys {
  createdAt            DateTime
  description          String?
  expiresAt            DateTime
  id                   Int           @default(autoincrement()) @id
  ipRestrictions       String?
  jwtApiKey            String
  name                 String?
  organization         organizations @relation(fields: [organizationId], references: [id])
  organizationId       Int
  referrerRestrictions String?
  scopes               String?
  updatedAt            DateTime      @default(dbgenerated())

  @@map("api-keys")
}

model approved_locations {
  createdAt DateTime?
  id        Int       @default(autoincrement()) @id
  subnet    String
  user      users     @relation(fields: [userId], references: [id])
  userId    Int

  @@map("approved-locations")
}

model backup_codes {
  code      Int      @id
  createdAt DateTime
  updatedAt DateTime @default(dbgenerated())
  used      Boolean  @default(false)
  user      users    @relation(fields: [userId], references: [id])
  userId    Int

  @@index([userId], name: "id")
  @@map("backup-codes")
}

model domains {
  createdAt        DateTime
  domain           String
  id               Int           @default(autoincrement()) @id
  isVerified       Boolean       @default(false)
  organization     organizations @relation(fields: [organizationId], references: [id])
  organizationId   Int
  updatedAt        DateTime      @default(dbgenerated())
  verificationCode String
}

model emails {
  createdAt  DateTime
  email      String
  id         Int      @default(autoincrement()) @id
  isVerified Boolean  @default(false)
  updatedAt  DateTime @default(dbgenerated())
  user       users    @relation(fields: [userId], references: [id])
  userId     Int

  @@index([userId], name: "userId")
}

model identities {
  createdAt  DateTime
  id         Int      @default(autoincrement()) @id
  identityId String
  loginName  String
  type       String
  updatedAt  DateTime @default(dbgenerated())
  user       users    @relation(fields: [userId], references: [id])
  userId     Int
}

model memberships {
  createdAt      DateTime
  id             Int           @default(autoincrement()) @id
  organization   organizations @relation(fields: [organizationId], references: [id])
  organizationId Int
  role           String        @default("member")
  updatedAt      DateTime      @default(dbgenerated())
  user           users         @relation(fields: [userId], references: [id])
  userId         Int

  @@index([organizationId], name: "org")
  @@index([userId], name: "user")
}

model organizations {
  autoJoinDomain   Boolean  @default(false)
  createdAt        DateTime
  forceTwoFactor   Boolean  @default(false)
  id               Int      @default(autoincrement())
  ipRestrictions   String?
  name             String?
  onlyAllowDomain  Boolean  @default(false)
  profilePicture   String   @default("https://unavatar.now.sh/fallback.png")
  stripeCustomerId String?
  updatedAt        DateTime @default(dbgenerated())
  username         String   @unique
  apiKeys          api_keys[]
  domains          domains[]
  memberships      memberships[]
  webhooks         webhooks[]

  @@id([id])
}

model sessions {
  createdAt DateTime
  id        Int      @default(autoincrement()) @id
  ipAddress String
  jwtToken  String
  updatedAt DateTime @default(dbgenerated())
  userAgent String
  user      users    @relation(fields: [userId], references: [id])
  userId    Int
}

model users {
  checkLocationOnLogin Boolean  @default(false)
  countryCode          String   @default("us")
  createdAt            DateTime
  gender               String   @default("x")
  id                   Int      @default(autoincrement())
  name                 String
  nickname             String
  notificationEmails   Int      @default(1)
  password             String?
  prefersLanguage      String   @default("en-us")
  prefersColorScheme   String   @default("system")
  prefersReducedMotion String   @default("no-preference")
  primaryEmail         Int?
  profilePicture       String
  role                 Int      @default(1)
  timezone             String   @default("Europe/Amsterdam")
  twoFactorEnabled     Boolean  @default(false)
  twoFactorSecret      String?
  updatedAt            DateTime @default(dbgenerated())
  username             String   @unique
  accessTokens         access_tokens[]
  approvedLocations    approved_locations[]
  backupCodes          backup_codes[]
  emails               emails[]
  identities           identities[]
  memberships          memberships[]
  sessions             sessions[]

  @@id([id])
}

model webhooks {
  contentType    String
  createdAt      DateTime
  event          String
  id             Int           @default(autoincrement()) @id
  isActive       Boolean       @default(false)
  lastFiredAt    DateTime?
  organization   organizations @relation(fields: [organizationId], references: [id])
  organizationId Int
  secret         String?
  updatedAt      DateTime      @default(dbgenerated())
  url            String
}
